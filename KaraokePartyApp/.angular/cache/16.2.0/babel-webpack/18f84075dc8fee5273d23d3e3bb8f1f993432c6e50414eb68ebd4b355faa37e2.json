{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { map, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ResultService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n  }\n  getResult(index) {\n    const headers = new HttpHeaders().set('Cache-Control', 'no-cache');\n    return this.http.get(`${this.apiUrl}/results/${index}`, {\n      headers\n    }).pipe(tap(data => {\n      console.log('Podaci sa servera:', data); // Dodajte ovu liniju za ispis podataka sa servera\n    }), map(data => {\n      if (data.id && data.guessed && data.playlist) {\n        return {\n          id: data.id,\n          guessed: data.guessed,\n          playlist: data.playlist\n        };\n      } else {\n        console.error('Neispravni podaci sa servera.'); // Dodajte ovu liniju za ispis greške\n        throw new Error('Neispravni podaci sa servera.');\n      }\n    }));\n  }\n}\n_class = ResultService;\n_class.ɵfac = function ResultService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","map","tap","ResultService","constructor","http","apiUrl","getResult","index","headers","set","get","pipe","data","console","log","id","guessed","playlist","error","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Windows\\System32\\myApp\\src\\app\\services\\result-service\\result.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, map, tap } from 'rxjs';\nimport { ResultInterface } from 'src/interfaces/result.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ResultService {\n  private apiUrl = 'http://localhost:3000';\n  constructor(private http: HttpClient) {}\n\n  getResult(index: number): Observable<ResultInterface> {\n    const headers = new HttpHeaders().set('Cache-Control', 'no-cache');\n    return this.http\n      .get<any>(`${this.apiUrl}/results/${index}`, { headers })\n      .pipe(\n        tap((data: any[]) => {\n          console.log('Podaci sa servera:', data); // Dodajte ovu liniju za ispis podataka sa servera\n        }),\n        map((data: any) => {\n          if (data.id && data.guessed && data.playlist) {\n            return {\n              id: data.id,\n              guessed: data.guessed,\n              playlist: data.playlist,\n            } as ResultInterface;\n          } else {\n            console.error('Neispravni podaci sa servera.'); // Dodajte ovu liniju za ispis greške\n            throw new Error('Neispravni podaci sa servera.');\n          }\n        })\n      );\n  }\n}\n"],"mappings":";AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,GAAG,EAAEC,GAAG,QAAQ,MAAM;;;AAM3C,OAAM,MAAOC,aAAa;EAExBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,MAAM,GAAG,uBAAuB;EACD;EAEvCC,SAASA,CAACC,KAAa;IACrB,MAAMC,OAAO,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CAAC,eAAe,EAAE,UAAU,CAAC;IAClE,OAAO,IAAI,CAACL,IAAI,CACbM,GAAG,CAAM,GAAG,IAAI,CAACL,MAAM,YAAYE,KAAK,EAAE,EAAE;MAAEC;IAAO,CAAE,CAAC,CACxDG,IAAI,CACHV,GAAG,CAAEW,IAAW,IAAI;MAClBC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,IAAI,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC,EACFZ,GAAG,CAAEY,IAAS,IAAI;MAChB,IAAIA,IAAI,CAACG,EAAE,IAAIH,IAAI,CAACI,OAAO,IAAIJ,IAAI,CAACK,QAAQ,EAAE;QAC5C,OAAO;UACLF,EAAE,EAAEH,IAAI,CAACG,EAAE;UACXC,OAAO,EAAEJ,IAAI,CAACI,OAAO;UACrBC,QAAQ,EAAEL,IAAI,CAACK;SACG;OACrB,MAAM;QACLJ,OAAO,CAACK,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;QAChD,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;;IAEpD,CAAC,CAAC,CACH;EACL;;SAzBWjB,aAAa;;mBAAbA,MAAa,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAbrB,MAAa;EAAAsB,OAAA,EAAbtB,MAAa,CAAAuB,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}