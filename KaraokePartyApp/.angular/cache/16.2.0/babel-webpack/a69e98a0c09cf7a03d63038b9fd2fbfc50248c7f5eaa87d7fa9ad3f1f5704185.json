{"ast":null,"code":"var _class;\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContinueLyricsService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n  }\n  getContinueLyrics() {\n    let randomNumber = Math.floor(Math.random() * 4) + 1;\n    console.log(randomNumber);\n    return this.http.get(`${this.apiUrl}/continueLyrics/${randomNumber}`).pipe(map(data => {\n      if (data) {\n        return data;\n      } else {\n        throw new Error('Nema dostupnih podataka.');\n      }\n    }));\n  }\n}\n_class = ContinueLyricsService;\n_class.ɵfac = function ContinueLyricsService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","ContinueLyricsService","constructor","http","apiUrl","getContinueLyrics","randomNumber","Math","floor","random","console","log","get","pipe","data","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Windows\\System32\\myApp\\src\\app\\services\\continue-lyrics-service\\continue-lyrics.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, map } from 'rxjs';\nimport { ContinueLyricsInterface } from 'src/interfaces/continue-lyrics.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContinueLyricsService {\n  private apiUrl = 'http://localhost:3000';\n\n  constructor(private http: HttpClient) {}\n\n  getContinueLyrics(): Observable<ContinueLyricsInterface> {\n    let randomNumber: number = Math.floor(Math.random() * 4) + 1;\n    console.log(randomNumber);\n    return this.http\n      .get<any[]>(`${this.apiUrl}/continueLyrics/${randomNumber}`)\n      .pipe(\n        map((data) => {\n          if (data) {\n            return data as ContinueLyricsInterface;\n          } else {\n            throw new Error('Nema dostupnih podataka.');\n          }\n        })\n      );\n  }\n}\n"],"mappings":";AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAMtC,OAAM,MAAOC,qBAAqB;EAGhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB;EAED;EAEvCC,iBAAiBA,CAAA;IACf,IAAIC,YAAY,GAAWC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;IAC5DC,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAO,IAAI,CAACH,IAAI,CACbS,GAAG,CAAQ,GAAG,IAAI,CAACR,MAAM,mBAAmBE,YAAY,EAAE,CAAC,CAC3DO,IAAI,CACHb,GAAG,CAAEc,IAAI,IAAI;MACX,IAAIA,IAAI,EAAE;QACR,OAAOA,IAA+B;OACvC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;;IAE/C,CAAC,CAAC,CACH;EACL;;SAnBWd,qBAAqB;;mBAArBA,MAAqB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAArBlB,MAAqB;EAAAmB,OAAA,EAArBnB,MAAqB,CAAAoB,IAAA;EAAAC,UAAA,EAFpB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}