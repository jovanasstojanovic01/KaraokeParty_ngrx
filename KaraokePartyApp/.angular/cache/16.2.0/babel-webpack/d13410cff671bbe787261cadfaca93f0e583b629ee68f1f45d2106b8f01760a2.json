{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { map, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContinueLyricsService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n  }\n  getContinueLyrics() {\n    let randomNumber = Math.floor(Math.random() * 4) + 1;\n    console.log(randomNumber);\n    const headers = new HttpHeaders().set('Cache-Control', 'no-cache');\n    return this.http.get(`${this.apiUrl}/continueLyrics/${randomNumber}`, {\n      headers\n    }).pipe(tap(data => {\n      console.log('Podaci sa servera:', data); // Dodajte ovu liniju za ispis podataka sa servera\n    }), map(data => {\n      if (data.length > 0) {\n        return data[0];\n      } else {\n        console.error('Nema dostupnih podataka.'); // Dodajte ovu liniju za ispis greške\n        throw new Error('Nema dostupnih podataka.');\n      }\n    }));\n  }\n}\n_class = ContinueLyricsService;\n_class.ɵfac = function ContinueLyricsService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","map","tap","ContinueLyricsService","constructor","http","apiUrl","getContinueLyrics","randomNumber","Math","floor","random","console","log","headers","set","get","pipe","data","length","error","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Windows\\System32\\myApp\\src\\app\\services\\continue-lyrics-service\\continue-lyrics.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, map, tap } from 'rxjs';\nimport { ContinueLyricsInterface } from 'src/interfaces/continue-lyrics.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContinueLyricsService {\n  private apiUrl = 'http://localhost:3000';\n\n  constructor(private http: HttpClient) {}\n\n  getContinueLyrics(): Observable<ContinueLyricsInterface> {\n    let randomNumber: number = Math.floor(Math.random() * 4) + 1;\n    console.log(randomNumber);\n    const headers = new HttpHeaders().set('Cache-Control', 'no-cache');\n    return this.http\n      .get<any[]>(`${this.apiUrl}/continueLyrics/${randomNumber}`, { headers })\n      .pipe(\n        tap((data: any[]) => {\n          console.log('Podaci sa servera:', data); // Dodajte ovu liniju za ispis podataka sa servera\n        }),\n        map((data: any[]) => {\n          if (data.length > 0) {\n            return data[0] as ContinueLyricsInterface;\n          } else {\n            console.error('Nema dostupnih podataka.'); // Dodajte ovu liniju za ispis greške\n            throw new Error('Nema dostupnih podataka.');\n          }\n        })\n      );\n  }\n}\n"],"mappings":";AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,GAAG,EAAEC,GAAG,QAAQ,MAAM;;;AAM3C,OAAM,MAAOC,qBAAqB;EAGhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB;EAED;EAEvCC,iBAAiBA,CAAA;IACf,IAAIC,YAAY,GAAWC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;IAC5DC,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,MAAMM,OAAO,GAAG,IAAId,WAAW,EAAE,CAACe,GAAG,CAAC,eAAe,EAAE,UAAU,CAAC;IAClE,OAAO,IAAI,CAACV,IAAI,CACbW,GAAG,CAAQ,GAAG,IAAI,CAACV,MAAM,mBAAmBE,YAAY,EAAE,EAAE;MAAEM;IAAO,CAAE,CAAC,CACxEG,IAAI,CACHf,GAAG,CAAEgB,IAAW,IAAI;MAClBN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,IAAI,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC,EACFjB,GAAG,CAAEiB,IAAW,IAAI;MAClB,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QACnB,OAAOD,IAAI,CAAC,CAAC,CAA4B;OAC1C,MAAM;QACLN,OAAO,CAACQ,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAAC;QAC3C,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;;IAE/C,CAAC,CAAC,CACH;EACL;;SAxBWlB,qBAAqB;;mBAArBA,MAAqB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAArBtB,MAAqB;EAAAuB,OAAA,EAArBvB,MAAqB,CAAAwB,IAAA;EAAAC,UAAA,EAFpB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}