{"ast":null,"code":"var _class;\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport * as SearchActions from './you-tube-store.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../components/karaoke-room/you-tube-service/you-tube.service\";\nexport class YouTubeStoreEffects {\n  constructor(actions$, youtubeService) {\n    this.actions$ = actions$;\n    this.youtubeService = youtubeService;\n    this.search$ = createEffect(() => this.actions$.pipe(ofType(SearchActions.searchAction), switchMap(action => this.searchMultipleVideos(action.query).pipe(catchError(() => of(SearchActions.searchErrorAction()))))));\n  }\n  searchMultipleVideos(query) {\n    return this.youtubeService.searchVideos(query, 5).pipe(switchMap(response => {\n      const videoItems = response.items;\n      return this.searchFirstEmbeddableVideo(query, videoItems, 0);\n    }));\n  }\n  searchFirstEmbeddableVideo(query, items, index) {\n    if (index < items.length) {\n      const videoId = items[index].id.videoId;\n      return this.youtubeService.isVideoEmbeddable(videoId).pipe(switchMap(isEmbeddable => {\n        if (isEmbeddable) {\n          return of(SearchActions.searchSuccessAction({\n            videoId\n          }));\n        } else {\n          return this.searchFirstEmbeddableVideo(query, items, index + 1);\n        }\n      }));\n    } else {\n      return of(SearchActions.searchErrorAction());\n    }\n  }\n}\n_class = YouTubeStoreEffects;\n_class.ɵfac = function YouTubeStoreEffects_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.YouTubeService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["createEffect","ofType","of","catchError","switchMap","SearchActions","YouTubeStoreEffects","constructor","actions$","youtubeService","search$","pipe","searchAction","action","searchMultipleVideos","query","searchErrorAction","searchVideos","response","videoItems","items","searchFirstEmbeddableVideo","index","length","videoId","id","isVideoEmbeddable","isEmbeddable","searchSuccessAction","i0","ɵɵinject","i1","Actions","i2","YouTubeService","factory","ɵfac"],"sources":["C:\\Windows\\System32\\myApp\\src\\app\\store\\you-tube-store\\you-tube-store.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\nimport * as SearchActions from './you-tube-store.actions';\r\nimport { YouTubeService } from '../../components/karaoke-room/you-tube-service/you-tube.service';\r\n\r\n@Injectable()\r\nexport class YouTubeStoreEffects {\r\n\r\n  constructor(private actions$: Actions, private youtubeService: YouTubeService) {}\r\n\r\n  search$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(SearchActions.searchAction),\r\n      switchMap(action =>\r\n        this.searchMultipleVideos(action.query).pipe(\r\n          catchError(() => of(SearchActions.searchErrorAction()))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  private searchMultipleVideos(query: string) {\r\n    return this.youtubeService.searchVideos(query, 5).pipe(\r\n      switchMap(response => {\r\n        const videoItems = response.items;\r\n        return this.searchFirstEmbeddableVideo(query, videoItems, 0);\r\n      })\r\n    );\r\n  }\r\n\r\n  private searchFirstEmbeddableVideo(query: string, items: any[], index: number)\r\n          :Observable<any> {\r\n    if (index < items.length) {\r\n      const videoId = items[index].id.videoId;\r\n      return this.youtubeService.isVideoEmbeddable(videoId).pipe(\r\n        switchMap(isEmbeddable => {\r\n          if (isEmbeddable) {\r\n            return of(SearchActions.searchSuccessAction({ videoId }));\r\n          } else {\r\n            return this.searchFirstEmbeddableVideo(query, items, index + 1);\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      return of(SearchActions.searchErrorAction());\r\n    }\r\n  }\r\n}"],"mappings":";AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAEC,SAAS,QAAQ,gBAAgB;AACtD,OAAO,KAAKC,aAAa,MAAM,0BAA0B;;;;AAIzD,OAAM,MAAOC,mBAAmB;EAE9BC,YAAoBC,QAAiB,EAAUC,cAA8B;IAAzD,KAAAD,QAAQ,GAARA,QAAQ;IAAmB,KAAAC,cAAc,GAAdA,cAAc;IAE7D,KAAAC,OAAO,GAAGV,YAAY,CAAC,MACrB,IAAI,CAACQ,QAAQ,CAACG,IAAI,CAChBV,MAAM,CAACI,aAAa,CAACO,YAAY,CAAC,EAClCR,SAAS,CAACS,MAAM,IACd,IAAI,CAACC,oBAAoB,CAACD,MAAM,CAACE,KAAK,CAAC,CAACJ,IAAI,CAC1CR,UAAU,CAAC,MAAMD,EAAE,CAACG,aAAa,CAACW,iBAAiB,EAAE,CAAC,CAAC,CACxD,CACF,CACF,CACF;EAX+E;EAaxEF,oBAAoBA,CAACC,KAAa;IACxC,OAAO,IAAI,CAACN,cAAc,CAACQ,YAAY,CAACF,KAAK,EAAE,CAAC,CAAC,CAACJ,IAAI,CACpDP,SAAS,CAACc,QAAQ,IAAG;MACnB,MAAMC,UAAU,GAAGD,QAAQ,CAACE,KAAK;MACjC,OAAO,IAAI,CAACC,0BAA0B,CAACN,KAAK,EAAEI,UAAU,EAAE,CAAC,CAAC;IAC9D,CAAC,CAAC,CACH;EACH;EAEQE,0BAA0BA,CAACN,KAAa,EAAEK,KAAY,EAAEE,KAAa;IAE3E,IAAIA,KAAK,GAAGF,KAAK,CAACG,MAAM,EAAE;MACxB,MAAMC,OAAO,GAAGJ,KAAK,CAACE,KAAK,CAAC,CAACG,EAAE,CAACD,OAAO;MACvC,OAAO,IAAI,CAACf,cAAc,CAACiB,iBAAiB,CAACF,OAAO,CAAC,CAACb,IAAI,CACxDP,SAAS,CAACuB,YAAY,IAAG;QACvB,IAAIA,YAAY,EAAE;UAChB,OAAOzB,EAAE,CAACG,aAAa,CAACuB,mBAAmB,CAAC;YAAEJ;UAAO,CAAE,CAAC,CAAC;SAC1D,MAAM;UACL,OAAO,IAAI,CAACH,0BAA0B,CAACN,KAAK,EAAEK,KAAK,EAAEE,KAAK,GAAG,CAAC,CAAC;;MAEnE,CAAC,CAAC,CACH;KACF,MAAM;MACL,OAAOpB,EAAE,CAACG,aAAa,CAACW,iBAAiB,EAAE,CAAC;;EAEhD;;SAxCWV,mBAAmB;;mBAAnBA,MAAmB,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;AAAA;;SAAnB5B,MAAmB;EAAA6B,OAAA,EAAnB7B,MAAmB,CAAA8B;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}